# $Id: Referral.pm,v 1.4 2000/10/12 19:03:43 davidb Exp $

# Copyright (c) 1997-2000 Network Solutions, Inc.
# See the file LICENSE for conditions of use and distribution.

package Net::Rwhois::Referral;

=head1 NAME

Net::Rwhois::Referral - Object interface for a Rwhois referral response.

=head1 SYNOPSIS

  use Net::Rwhois::Connection;
  use Net::Rwhois::Referral;

  $r = new Net::Rwhois::Referral( URL =>
                                   "rwhois://root.rwhois.net/auth-area=com");

  $r2 = new Net::Rwhois::Referral();

  $r2->set_host("foo.bar.net");

  $r2->set_authority_area("bar.net");

  print "%referral: ", $r2->get_url(), "\r\n";

  $c = new Net::Rwhois::Connection( Host => $r->get_host,
                                    Port => $r->get_port );

  $c->open();

  $c2 = new Net::Rwhois::Connection( Referral => $r );

  $r3 = new Net::Rwhois::Referral(Line =>
                            "%referral rwhois://root.rwhois.net/auth-area=.");

=head1 DESCRIPTION

C<Net::Rwhois::Referral> represents a referral generated by an Rwhois
server.  It contains all the information necessary to follow a
referral.  This class understands both the 1.5 (or greater) URL-style
referral, as well as the older 1.0 style.

=head1 CONSTRUCTOR

=over 4

=item * Host

The host name of the referral.

=item * Port

The port number of the referral

=item * URL

The rwhois URL, either 1.0- or 1.5-style.

=item * Line

The rwhois referral line.  I.e, the line starting with "%referral".

=back

=item new ( [ARGS] )

Creates a C<Net::Rwhois::Referral> object.  This constructor takes an
anonymous hash, allowing for a number of initialization scenarios.  The constructor parameters are

=over 4



=back

=head1 METHODS

=over 4

=item configure( [ARGS] )

Takes the same arguments as the constructor, with the same logic.

=item get_host()

Returns the host component of the referral.

=item set_host( host )

Sets the host component of the referral.

=item get_port()

Returns the port component of the referral.

=item set_port ( port )

Sets the port component of the referral.

=item get_authority_area()

Returns the authority area component of the referral (if any).

=item set_authority_area( authority_area )

Sets the authority area component of the referral.

=item get_protocol()

Returns the protocol ('rwhois', 'whois', etc.).

=item set_protocol( protocol )

Sets the protocol.

=item get_url()

Returns the URL associated with the referral, building it if need be.

=item set_url( URL )

Parses the given referral URL and populates the object.

=item is_valid()

True if the referral object has been initialized with enough
information to make a followable referral.

=back

=head1 SEE-ALSO

=over 4

=item L<Net::Rwhois>

=item L<Net::Rwhois::Connection>

=item L<Net::Rwhois::QueryResponse>

=back

=cut

require 5.003;

use Carp;

use strict;
use vars qw(@ISA $VERSION);

# use Exporter;
# @ISA       = qw( Exporter );
# @EXPORT_OK = qw();


##
## Public Methods
##
sub new {
  my $this = shift;
  my $class = ref($this) || $this;
  my %args = @_;

  my $self = {};
  bless $self, $class;

  # defaults
  $self->{'host'}           = "localhost";
  $self->{'port'}           = undef;
  $self->{'authority_area'} = "";
  $self->{'protocol'}       = "";
  $self->{'url'}            = "";

  $self->{'_match_url'}     = 0;

  $self->configure(\%args);

  $self;
}

sub configure {
  my $self = shift;
  my $args = shift;

  my $key;

  for (keys %$args) {
    /^host/i       and do {
      $self->set_host($args->{$_});
      next;
    };
    /^port/i       and do {
      $self->set_port($args->{$_});
      next;
    };
    /^authority[-_]area/i      and do {
      $self->set_authority_area($args->{$_});
      next;
    };
    /^url/i     and do {
      $self->set_url($args->{$_});
      next;
    };
    /^line/i    and do {
      $self->_parse_line($args->{$_});
      next;
    };
  }
}

sub get_host {
  my $self = shift;

  $self->{'host'};
}

sub set_host {
  my $self = shift;

  $self->{'host'} = shift;
  $self->{'_match_url'} = 0;
}

sub get_port {
  my $self = shift;

  $self->{'port'};
}

sub set_port {
  my $self = shift;

  $self->{'port'} = shift;
  $self->{'_match_url'} = 0;
}

sub get_authority_area {
  my $self = shift;

  $self->{'authority_area'};
}

sub set_authority_area {
  my $self = shift;

  $self->{'authority_area'} = shift;
  $self->{'_match_url'} = 0;
}

sub get_protocol {
  my $self = shift;

  $self->{'protocol'};
}

sub set_protocol {
  my $self = shift;

  $self->{'protocol'} = shift;
}

sub get_url {
  my $self = shift;

  if (not $self->{'_match_url'}) {
    $self->{'url'} = $self->_build_url();
    $self->{'_match_url'} = 1;
  }

  $self->{'url'};
}

sub set_url {
  my $self = shift;

  $self->_parse_url(shift)
}

sub get_ref1_0 {
  my $self = shift;

  $self->_build_ref1_0();
}

sub is_valid {
  my $self = shift;
}

##
## Private Methods
##

sub _parse_url {
  my $self = shift;
  my $url  = shift;

  if ($url =~
      m~([a-zA-Z]+)://(([a-zA-Z0-9-.]+|[0-9.]+)(:(\\d+))?)?(/auth-area=([^?&]+))?~)
  {
    $self->set_protocol($1);
    $self->set_host($3);
    $self->set_port($5) if $5;
    $self->set_authority_area($7) if $7;

    $self->{'url'} = $url;
    $self->{'_match_url'} = 1;
  }
  elsif ($url =~ m|([^\\s:]+):(\\d+):([a-zA-Z]+)(\\s*(\\S+))?|)
  {
    $self->set_host($1);
    $self->set_port($2);
    $self->set_protocol($3);
    $self->set_authority_area($5) if $5;

    $self->{'url'} = "";
    $self->{'_match_url'} = 0;
  }
}

sub _parse_line {
  my $self = shift;
  my $line = shift;

  if ($line =~ /%referral\s+(.*)$/io) {
    $self->set_url($1);
  }
  else {
    carp "line '$line' must start with %referral";
  }
}

sub _build_url {
  my $self = shift;

  my $url = $self->get_protocol() . "://" . $self->get_host();

  # if ($self->get_port() != 4321) {
  #   $url .= ":$self->{'port'}";
  # }

  if ($self->{'authority_area'}) {
    $url .= "/auth-area=$self->{'authority_area'}";
  }

  $url;
}

sub _build_ref1_0 {
  my $self = shift;

  my $oldurl = "$self->{'host'}:$self->{'port'}:rwhois";

  if ($self->{'authority_area'}) {
    $oldurl .= " $self->{'authority_area'}";
  }

  $oldurl;
}
1;
